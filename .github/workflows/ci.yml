name: CI Pipeline

on:
  push:
    branches: [ main, Developer ]
  pull_request:
    branches: [ main, Developer ]

permissions:
  contents: read
  security-events: write

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.6'

jobs:
  security-deps:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "microservice-user"
          path: "."
          format: "HTML"
          out: "dependency-report"
          args: "--nvdApiKey ${{ secrets.NVD_API_KEY }}"

      - name: Verificar reporte
        run: |
          if [ ! -f ./dependency-report/dependency-check-report.html ]; then
            echo "❌ No se generó el reporte de Dependency Check."
            exit 1
          fi

      - name: Subir reporte como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-report/
          retention-days: 5

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Tests
        run: mvn test -DfailIfNoTests=false

      - name: Package App
        run: mvn clean package -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  docker-security:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t microservice-user:${{ github.sha }} .

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'microservice-user:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload scan result as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan
          path: trivy-results.sarif

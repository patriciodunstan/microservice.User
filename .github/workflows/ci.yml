name: CI/CD Pipeline with Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.6'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: OWASP Dependency Check
        run: mvn dependency-check:check -Psecurity-scan

      - name: Upload OWASP report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-security-report
          path: target/security-reports/

  test:
    name: Test and Build
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Unit Tests
        run: mvn test -DfailIfNoTests=false

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/*.jar

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t microservice-user:${{ github.sha }} .
          docker tag microservice-user:${{ github.sha }} microservice-user:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'microservice-user:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trivy-security-report
          path: trivy-results.sarif
     
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, docker-security]
    if: always()
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.docker-security.result == 'success' 
        run: |
          echo "✅ All checks passed! Pipeline completed successfully."
          
          # Example: Slack notification
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Pipeline completed successfully for ${{ github.repository }}@${{ github.sha }}!"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
          
          # Example: Teams notification
          if [ -n "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Pipeline completed successfully for ${{ github.repository }}@${{ github.sha }}!"}' \
              ${{ secrets.TEAMS_WEBHOOK_URL }}
          fi

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.docker-security.result == 'failure' 
        run: |
          echo "❌ Pipeline failed! Check the logs for details."
          
          # Example: Slack notification
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Pipeline failed for ${{ github.repository }}@${{ github.sha }}! Check the logs."}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
          
          # Example: Teams notification
          if [ -n "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Pipeline failed for ${{ github.repository }}@${{ github.sha }}! Check the logs."}' \
              ${{ secrets.TEAMS_WEBHOOK_URL }}
          fi 